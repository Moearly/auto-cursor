name: Build and Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # macOS Intel
            args: "--target x86_64-apple-darwin"
            target: x86_64-apple-darwin
            arch: x86_64
            os: macos
          - platform: "macos-latest" # macOS M1
            args: "--target aarch64-apple-darwin"
            target: aarch64-apple-darwin
            arch: aarch64
            os: macos
          - platform: "windows-latest" # Windows x64
            args: "--target x86_64-pc-windows-msvc"
            target: x86_64-pc-windows-msvc
            arch: x86_64
            os: windows

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install Node.js dependencies
        run: pnpm install

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Build frontend
        run: pnpm build

      - name: Clean pyBuild for current platform
        shell: bash
        run: |
          # 只保留当前平台的pyBuild文件，删除其他平台的
          if [ "${{ matrix.os }}" = "macos" ]; then
            rm -rf src-tauri/pyBuild/windows
          elif [ "${{ matrix.os }}" = "windows" ]; then
            rm -rf src-tauri/pyBuild/macos
          fi

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Prepare artifacts (macOS)
        if: matrix.os == 'macos'
        run: |
          mkdir -p artifacts
          # 只复制 .dmg 文件
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.dmg" -exec cp {} artifacts/ \;
          # 重命名文件以包含架构信息
          cd artifacts
          for file in *.dmg; do
            if [ -f "$file" ]; then
              mv "$file" "${file%.dmg}_${{ matrix.arch }}.dmg"
            fi
          done

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows'
        run: |
          mkdir artifacts
          # 只复制 .msi 安装程序文件
          Get-ChildItem -Path "src-tauri/target/${{ matrix.target }}/release/bundle" -Recurse -Include "*.msi" | Copy-Item -Destination "artifacts/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: auto-cursor-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/*
          if-no-files-found: warn
          compression-level: 0 # 不压缩，保持原始文件格式

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
